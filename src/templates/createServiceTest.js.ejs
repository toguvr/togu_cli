import Create<%= props.nameUpperFirstCase %>Service from './Create<%= props.nameUpperFirstCase %>Service';
import <%= props.nameUpperFirstCase %>Repository from '../infra/typeorm/repositories/<%= props.nameUpperFirstCase %>Repository';
import I<%= props.nameUpperFirstCase %>Repository from '../repositories/I<%= props.nameUpperFirstCase %>Repository';

let fake<%= props.nameUpperFirstCase %>Repository: I<%= props.nameUpperFirstCase %>Repository;

let create<%= props.nameUpperFirstCase %>Service: Create<%= props.nameUpperFirstCase %>Service;

describe('Create<%= props.nameUpperFirstCase %> Unit Test', () => {
  beforeEach(() => {
    fake<%= props.nameUpperFirstCase %>Repository = new <%= props.nameUpperFirstCase %>Repository();

    create<%= props.nameUpperFirstCase %>Service = new Create<%= props.nameUpperFirstCase %>Service(fake<%= props.nameUpperFirstCase %>Repository);
  });

  it('should be able to create', async () => {
    await fake<%= props.nameUpperFirstCase %>Repository.create({
      name: 'fake-name',
    });

    const response = await create<%= props.nameUpperFirstCase %>Service.execute({
      body: { name: 'fake-name', <%= props.name %>Id: 'fake-<%= props.name %>Id' },
      user_id: 'fake-user_id',
    });

    expect(response).toHaveProperty('name');
  });
});
